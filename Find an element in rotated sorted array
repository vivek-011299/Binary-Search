/*
Given a sorted and rotated array A of N distinct elements which is rotated at some point, and given an element key. The task is to find the index of the given element key in
the array A.
*
*
Sample Input :- 
N = 9
A[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}
key = 10
Output:
5
*/

Solution :-

int getmin(int arr[], int start, int end)                         // This function is getting the index of the element from where the array is rotated...
    {
            int n=end+1;
            while(start<=end)
            {
                int mid=(start+end)/2;
                int next=(mid+1)%n;
                int prev=(mid+n-1)%n;
                if(arr[mid]<arr[prev] && arr[mid]<arr[next])
                {
                    return mid;
                }
                if(arr[mid]>arr[end])
                {
                    start=mid+1;
                }
                else if(arr[mid]<arr[end])
                {
                    end=mid-1;
                }
            }
            return 0;
    }
    int bs(int arr[],int start,int end,int key)                     // This function is binary search...
    {
        while(start<=end)
        {
            int mid=(start+end)/2;
            if(arr[mid]==key)
            {
                return mid;
            }
            if(arr[mid]>key)
            {
                end=mid-1;
            }
            else if(arr[mid]<key)
            {
                start=mid+1;
            }
        }
        return -1;
    }
    int search(int A[], int l, int h, int key){        // Idea is to first find the index from where the array is rotated and then applying binary search on both the halves.
            int minindex=getmin(A,l,h);
            int n=h+1;
            int x=bs(A,0,minindex-1,key);
            int y=bs(A,minindex,n,key);
            if(x==-1)
            {
                return y;
            }
            else
            return x;
    }
