/*
Given a sorted array array containing n elements with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element x in the given array.
*
*
Sample input 1 : - 

n=9, x=5
arr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }
Output:  2 5

Sample Input 2 :-

n=9, x=7
arr[] = { 1, 3, 5, 5, 5, 5, 7, 123, 125 }
Output:  6 6 
*
*
*/

Solution: - 

int firstOccurence(int arr[],int n,int x)                                           //   This Function calculates first occurence of that element
{
    int start=0;
    int end=n-1;
    int ans=-1;
    while(start<=end)
    {
        int mid=(start+end)/2;
        if(arr[mid]==x)
        {
            ans=mid;
            end=end-1;
        }
        else if(arr[mid]>x)
        {
            end=end-1;
        }
        else
        {
            start=start+1;
        }
    }
    return ans;
}
int lastOccurence(int arr,int n,int x)                                // This Function calculates last occurence of that element
{
    int start=0;
    int end=n-1;
    int ans=-1;
     while(start<=end)
    {
        int mid=(start+end)/2;
        if(arr[mid]==x)
        {
            ans=mid;
            start=start+1;
        }
        else if(arr[mid]>x)
        {
            end=end-1;
        }
        else
        {
            start=start+1;
        }
    }
    return ans;
}
vector<int> find(int arr[], int n , int x )
{
    
    vector<int> result;
    int first_occurence = firstOccurence(arr,n,x);
    int last_occurence = lastOccurence(arr,n,x);
    result.push_back(first_occurence);
    result.push_back(last_occurence);
    return result;
}
